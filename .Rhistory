# are replaced with a '+' character (what function could you use?)
fav_no_space <- gsub(" ", "+", fav_movie)
# Make a variable called "parameters" that holds a string with the parameters
# you want to pass to the API. Look at the OMDb documentation to see which parameters
# are available. Remember to separate parameters with a '&' character.
parameters <- paste0("t=", fav_no_space, "&", "r=json")
# Make a variable called fav_request that is a string of a request URL made up of the base URL
# and the parameters string
fav_request <- paste0(base_url, parameters)
# Use fromJSON to retrieve JSON data from the omdb api using your request URL. Store
# the result in a variable called movie_data
movie_data <- fromJSON(fav_request)
# Make movie_data into a data frame using as.data.frame
movie_data <- as.data.frame(movie_data)
base_url <- 'http://www.omdbapi.com/?'
# Make a variable called fav_movie that has the names of your favorite movie
fav_movie <- 'The Imitation Game'
# Make a variable called fav_no_spaces that holds fav_movie where all the spaces
# are replaced with a '+' character (what function could you use?)
fav_no_space <- gsub(" ", "+", fav_movie)
# Make a variable called "parameters" that holds a string with the parameters
# you want to pass to the API. Look at the OMDb documentation to see which parameters
# are available. Remember to separate parameters with a '&' character.
parameters <- paste0("t=", fav_no_space, "&", "r=json")
# Make a variable called fav_request that is a string of a request URL made up of the base URL
# and the parameters string
fav_request <- paste0(base_url, parameters)
# Use fromJSON to retrieve JSON data from the omdb api using your request URL. Store
# the result in a variable called movie_data
movie_data <- fromJSON(fav_request)
# Make movie_data into a data frame using as.data.frame
movie_data <- as.data.frame(movie_data)
View(movie_data)
who_directed <- function(movies) {
statement <- paste(movies$Title, 'was directed by', movies$Director)
return(statement)
}
# Make a variable called about that tells me the name of your movie and who directed it
# Use your who_directed function
dir_imi <- who_directed(movie_data)
dir_imi
help(lapply)
fav_movies <- c("The Departed", "The Lion King", "Frozen", "Troy", "Hook", "Hitch", "Gone Baby Gone")
favs_no_spaces <- gsub(" ", "+", fav_movies)
parameters <- paste0("t=", favs_no_spaces, "&","r=json")
fav_requests <- paste0(base_url, parameters)
# This is the same stuff you did above
# but done to multiple movies so each variable holds a vector. Make sure to run these
# lines before you continue. Take a look at the variables to get a feel for whats going on
# For every entry in the vector fav_requests, APPLY the function fromJSON to make a list of lists
# one entry for each request and assign this to a variable called data. Take a look at the lapply function.
lapply(fav_requests, fromJSON)
help(do.call)
![img](`r data_info498f$avatar_url`)
# GitHub Info
The username is `r github_org`. The number of repositories that user has is `r num_repos`. The most popular repository of that user are `r most_popular`.
Here is an image of the user.
![img](`r data_info498f$avatar_url`)
#GitHub Info
The username is `r github_org`. The number of repositories that user has is `r num_repos`. The most popular repository of that user are `r most_popular`.
Here is an image of the user.
![img](`r data_info498f$avatar_url`)
Github Info
The username is `r github_org`. The number of repositories that user has is `r num_repos`. The most popular repository of that user are `r most_popular`.
Here is an image of the user.
![img](`r data_info498$avatar_url`)
# Load the required libraries
library(jsonlite)
library(knitr)
library(dplyr)
base <- 'https://api.github.com/users/'
# Create a variable that stores the name of our GitHub organization, INFO-498F
github_org <- 'INFO-498F'
access_token <- '19f0bcc7c38be8c76e519044d1965ac7293aa770'
query <- paste0(base, github_org, '?access_token=', access_token)
# Create a variable that contains the data about the user from GitHub.
data_info498 <- fromJSON(query)
repos_base <- data_info498$repos_url
# Set the repositories sorted in descending order by the created property
sort <- '?sort=created&order=desc'
# Set the per_page property to 100 in the request
page_100 <- '&per_page=100'
# Pass in your access_token
repos_url <- paste0(repos_base, sort, page_100, '&access_token=', access_token)
# Create a variable that contains the data about information specifically about the user's repositories.
repos_data <- fromJSON(repos_url)
# Flatten the data frame.
repos_flattened <- flatten(repos_data)
# A variable num_repos that has the number of repositories that were returned to you.
num_repos <- nrow(repos_flattened)
# A variable most_popular that has the name of the repository with the greatest number of forks.
most_popular <- repos_flattened %>%
filter(forks_count == max(forks_count)) %>%
select(name)
data_info498
most_popular <- repos_flattened %>%
filter(forks_count == max(forks_count)) %>%
select(name)
most_popular
most_popular
most_popular <- (repos_flattened$name)[repos_flattened$forks_count == max(repos_flattened$forks_count)]
most_popular
repos_flattened <- repos_flattened %>%
mutate(date_created = as.Date(created_at)) %>%
format(format= "%B %d %Y")
# Create a data.frame that only has the columns 1-3, and the date_created column
my_data <- repos_flattened %>%
select(id, name, full_name, date_created)
# Assign more readable names to my_data.
names(my_data)[1:4] <- c("ID of the repo", "name of the repo", "full name of the repo", "date created")
View(my_data)
"Average number of forks" = mean(forks_count, na.rm = TRUE))
summary_repo <- repos_flattened %>%
group_by(language) %>%
summarize("Number of repositories" = n(),
"Average number of forks" = mean(forks_count, na.rm = TRUE))
kable(summary_repo)
class(repos_flattened$forks_count)
is.factor(repos_flattened$forks_count)
summarize("Number of repositories" = n(),
kable(summary_repo)
```
"Average number of forks" = mean(forks_count, na.rm = TRUE))
is.integer(repos_flattened$forks_count)
most_popular <- repos_flattened %>% filter(forks_count == max(forks_count))$name
most_popular <- filter(repos_flattened, forks_count == max(forks_count))$name
most_popular
```{r, echo=FALSE, message=FALSE}
# Load the required libraries
library(jsonlite)
library(knitr)
library(dplyr)
base <- 'https://api.github.com/users/'
# Create a variable that stores the name of our GitHub organization, INFO-498F
github_org <- 'INFO-498F'
access_token <- '19f0bcc7c38be8c76e519044d1965ac7293aa770'
query <- paste0(base, github_org, '?access_token=', access_token)
# Create a variable that contains the data about the user from GitHub.
data_info498 <- fromJSON(query)
repos_base <- data_info498$repos_url
# Set the repositories sorted in descending order by the created property
sort <- '?sort=created&order=desc'
# Set the per_page property to 100 in the request
page_100 <- '&per_page=100'
# Pass in your access_token
repos_url <- paste0(repos_base, sort, page_100, '&access_token=', access_token)
# Create a variable that contains the data about information specifically about the user's repositories.
repos_data <- fromJSON(repos_url)
# Flatten the data frame.
repos_flattened <- flatten(repos_data)
# A variable num_repos that has the number of repositories that were returned to you.
num_repos <- nrow(repos_flattened)
# A variable most_popular that has the name of the repository with the greatest number of forks.
most_popular <- filter(repos_flattened, forks_count == max(forks_count))$name
```
## GitHub Info
- The username is `r github_org`.
- The number of repositories that user has `r num_repos`.
- The most popular repository of that user are `r most_popular`.
Here is an image of the user.
![img](`r data_info498$avatar_url`)
```{r, echo=FALSE, message=FALSE}
# Create a column called date_created in the repos data frame that stores the date the repo was created
repos_flattened <- mutate(repos_flattened, date_created = format(as.Date(created_at)))
# Create a data.frame that only has the columns 1-3, and the date_created column
my_data <- repos_flattened %>%
select(id, name, full_name, date_created)
# Assign more readable names to my_data.
names(my_data) <- c("ID of the repo", "Name of the repo", "Full name of the repo", "Date created")
```
#### Here is a table showing `r names(my_data)` about GitHub user `r github_org`.
```{r, echo=FALSE, message=FALSE}
# Create a table of the previous data frame
knitr::kable(my_data)
```
# Create a column called date_created in the repos data frame that stores the date the repo was created
repos_flattened <- mutate(repos_flattened, date_created = format(as.Date(created_at)))
# Create a data.frame that only has the columns 1-3, and the date_created column
my_data <- repos_flattened %>%
select(id, name, full_name, date_created)
# Assign more readable names to my_data.
names(my_data) <- c("ID of the repo", "Name of the repo", "Full name of the repo", "Date created")
# Create a table of the previous data frame
knitr::kable(my_data)
summary_repo <- repos_flattened %>%
group_by(language) %>%
summarize("Number of repositories" = n(),
"Average number of forks" = mean(forks_count, na.rm = TRUE))
knitr::kable(summary_repo)
library(plotly)
install.packages('plotly')
library(plotly)
```
library(plotly)
plot_ly(data = repos_flattened, type = "scatter")
plot_ly(data = repos_flattened, type = "surface")
plot_ly(z = volcano, type = "surface")
plot_ly(repos_flattened, x = language, y = forks_count)
plot_ly(repos_flattened, x = fokrs_count y = language)
plot_ly(repos_flattened, x = fokrs_count, y = language)
plot_ly(repos_flattened, x = forks_count, y = language)
plot_ly(repos_flattened, x = forks_count, y = language, text = rownames(repos_flattened))
plot_ly(repos_flattened, x = forks_count, y = language, type = "markers")
plot_ly(repos_flattened, x = forks_count, y = language, type = "markers")
plot_ly(repos_flattened, x = forks_count, y = size, type = "markers")
plot_ly(repos_flattened, x = forks_count, y = size)
plot_ly(repos_flattened, x = forks_count, y = size, mode = "markers")
plot_ly(repos_flattened, x = forks_count, y = size, mode = "markers", text = name)
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='ireneee', token='E4DA460A4924C1DCB0FE3885C57F3019', secret='1+jlhqrxlY8ZZTwKfy265Sm6F+FCPZC5bnQS6Sgk')
iris
Iris <- iris
View(Iris)
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
shiny::runApp('Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('/Users/Irene/Desktop/Study/sophomore/2016winter/Info-498/a8-iris')
setwd("/Users/Irene/Desktop/Study/sophomore/2016winter/Info-498/Final-Project-anythinginfo")
setwd("/Users/Irene/Desktop/Study/sophomore/2016winter/Info-498/a6-mapping-shootings")
df <- read.csv("data/Carbon_Emission_Data.csv")
setwd("/Users/Irene/Desktop/Study/sophomore/2016winter/Info-498/Final-Project-anythinginfo")
df
top_ten <-
;
> setwd("/Users/Irene/Desktop/Study/sophomore/2016winter/Info-498/Final-Project-anythinginfo")
setwd("/Users/Irene/Desktop/Study/sophomore/2016winter/Info-498/Final-Project-anythinginfo")
df <- read.csv("data/Carbon_Emission_Data.csv")
View(df)
carbon <- read.csv("data/Carbon_Emission_Data.csv")
carbon <- read.csv("data/Carbon_Emission_Data.csv")
tem_change <- read.csv("data/tem_change.csv")
View(tem_change)
View(carbon)
top_ten_emission <- head(arrange(carbon,desc(X2014)), n = 10)
library(dplyr)
library(plotly)
library(knitr)
top_ten_emission <- head(arrange(carbon,desc(X2014)), n = 10)
View(top_ten_emission)
top_ten_emission <- carbon %>%
arrange(desc(X2014)) %>%
head(n = 10)
View(tem_change)
View(top_ten_emission)
top_ten_emission <- carbon %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country)
top_ten_emission
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X2014, tem_change)
View(top_ten_emission)
tem_change <- tem_change %>% mutate(diff = X2014 - X1960)
tem_change <- tem_change %>% mutate(diff = X2014 - X1960)
options(stringsAsFactors = FALSE)
tem_change <- tem_change %>% mutate(diff = X2014 - X1960)
tem_change <- tem_change %>% mutate(diff = X2014-X1960)
tem_change <- tem_change %>% mutate('diff' = X2014-X1960)
is.integer(carbon$X1960)
is.String(carbon$X1960)
library(dplyr)
library(plotly)
library(knitr)
carbon <- read.csv("data/Carbon_Emission_Data.csv")
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X2014, tem_change)
View(top_ten_emission)
top_ten_emission <- tem_change %>%
arrange(desc(X2014-X1960)) %>%
head(n = 10) %>%
select(Country, X2014, tem_change)
top_ten_emission <- tem_change %>%
arrange(desc(X2014-X1960)) %>%
head(n = 10) %>%
select(Country, X2014, tem_change)
top_ten_emission <- tem_change %>%
arrange(desc(X2014-X2000)) %>%
head(n = 10) %>%
select(Country, X2014, tem_change)
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X2014, tem_change)
help(colnames)
colnames(top_ten_emission) <- c('Top 10 Carbon Emission Countries', 'Carbon Emission in 2014', 'Temperature Change since 1960')
View(top_ten_emission)
View(top_ten_emission)
average_tem_change <- mean(tem_change$tem_change)
average_tem_change <- mean(tem_change$tem_change) %>%
round(digits=2)
num_above_avg <- tem_change %>%
filter(tem_change < average_tem_change) %>%
ncol()
options(stringsAsFactors = FALSE)
top_ten_emission <- mutate(top_ten_emission, diff = X2014)
top_ten_emission <- arrange(top_ten_emission, desc(X2014))
options(stringsAsFactors = FALSE)
carbon <- read.csv("data/Carbon_Emission_Data.csv")
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X2014, tem_change)
top_ten_emission <- arrange(top_ten_emission, desc(X2014))
top_ten_emission <- mutate(top_ten_emission, diff = X2014)
View(top_ten_emission)
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X2014, X1960, tem_change)
View(top_ten_emission)
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X1960, X2014, tem_change)
top_ten_emission <- arrange(top_ten_emission, desc(X2014))
top_ten_emission <- mutate(top_ten_emission, diff = X2014- X1960)
View(top_ten_emission)
top_ten_emission <- mutate(top_ten_emission, diff = top_ten_emission$X2014 - top_ten_emission$X1960)
top_ten_emission <- mutate(top_ten_emission, diff = as.numeric(X2014) - as.numeric(X1960))
is.numeric(top_ten_emission$X1960)
as.numeric(top_ten_emission$X1960)
as.numeric(top_ten_emission$X2014)
carbon <- read.csv("data/Carbon_Emission_Data.csv")
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X1960, X2014, tem_change)
top_ten_emission <- arrange(top_ten_emission, desc(X2014))
average_tem_change <- mean(tem_change$tem_change) %>%
round(digits=2)
num_above_avg <- tem_change %>%
filter(tem_change < average_tem_change) %>%
ncol()
colnames(top_ten_emission) <- c('Top 10 Carbon Emission Countries', 'Carbon Emission in 2014', 'Temperature Change since 1960')
View(top_ten_emission)
View(top_ten_emission)
library(dplyr)
library(plotly)
library(knitr)
options(stringsAsFactors = FALSE)
carbon <- read.csv("data/Carbon_Emission_Data.csv")
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X1960, X2014, tem_change)
top_ten_emission <- arrange(top_ten_emission, desc(X2014))
average_tem_change <- mean(tem_change$tem_change) %>%
round(digits=2)
num_above_avg <- tem_change %>%
filter(tem_change < average_tem_change) %>%
ncol()
colnames(top_ten_emission) <- c('Top 10 Carbon Emission Countries', 'Carbon Emission in 2014', 'Temperature Change since 1960')
View(top_ten_emission)
View(top_ten_emission)
as.numeric(levels(top_ten_emission[,2])[df[,2]])
as.numeric(levels(top_ten_emission[,2])[top_ten_emission[,2]])
as.numeric(levels(top_ten_emission[,3])[top_ten_emission[,3]])
top_ten_emission  <- mutate(top_ten_emission, diff = X2014-X1960)
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X1960, X2014, tem_change)
top_ten_emission <- arrange(top_ten_emission, desc(X2014))
as.numeric(levels(top_ten_emission[,2])[top_ten_emission[,2]])
as.numeric(levels(top_ten_emission[,3])[top_ten_emission[,3]])
top_ten_emission  <- mutate(top_ten_emission, diff = X2014-X1960)
as.numeric(levels(top_ten_emission[,2])[top_ten_emission[,2]])
as.numeric(levels(top_ten_emission[,3])[top_ten_emission[,3]])
top_ten_emission  <- mutate(top_ten_emission, diff = X2014-X1960)
as.numeric(as.character(top_ten_emission[,2]))
as.numeric(as.character(top_ten_emission[,3]))
as.numeric(as.character(top_ten_emission[,3]))
as.numeric(levels(top_ten_emission[,3]))[top_ten_emission[,3]]
as.numeric(levels(top_ten_emission[,3]))[top_ten_emission[,3]]
as.numeric(as.character(top_ten_emission[,3]))
carbon <- read.csv("data/Carbon_Emission_Data.csv")
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X1960, X2014, tem_change)
top_ten_emission <- arrange(top_ten_emission, desc(X2014))
as.numeric(as.character(top_ten_emission[,2]))
as.numeric(as.character(top_ten_emission[,3]))
as.numeric(as.character(top_ten_emission[7,3]))
top_ten_emission[7,3] <- 9,679.8208
top_ten_emission[7,3] <- 9679.8208
carbon <- read.csv("data/Carbon_Emission_Data.csv")
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X1960, X2014, tem_change)
top_ten_emission <- arrange(top_ten_emission, desc(X2014))
top_ten_emission[7,3] <- 9679.8208
top_ten_emission <- mutate(top_ten_emission, diff = X2014 - X1960)
as.numeric(as.numeric(levels(top_ten_emission[,2]))[levels(top_ten_emission[,2])])
top_ten_emission[7,3] <- 9679.8208
as.numeric(as.numeric(levels(top_ten_emission[,3]))[levels(top_ten_emission[,3])])
top_ten_emission <- mutate(top_ten_emission, diff = X2014 - X1960)
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X1960, X2014, tem_change)
top_ten_emission <- arrange(top_ten_emission, desc(X2014))
as.numeric(as.numeric(levels(top_ten_emission[,2]))[levels(top_ten_emission[,2])])
top_ten_emission[7,3] <- 9679.8208
as.numeric(as.numeric(levels(top_ten_emission[,3]))[levels(top_ten_emission[,3])])
top_ten_emission <- mutate(top_ten_emission, diff = X2014 - X1960)
is.numeric(top_ten_emission$X1960)
as.numeric(as.numeric(levels(top_ten_emission[,2]))[levels(top_ten_emission[,2])])
as.numeric(as.numeric(levels(top_ten_emission[,3]))[levels(top_ten_emission[,3])])
top_ten_emission[7,3] <- 9679.8208
top_ten_emission <- mutate(top_ten_emission, diff = X2014 - X1960)
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(X2014)) %>%
head(n = 10) %>%
select(Country, X1960, X2014, tem_change)
View(top_ten_emission)
as.numeric(as.numeric(levels(tem_change[,4]))[levels(tem_change[,4])])
is.numeric(tem_change$X1960)
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(tem_change)) %>%
head(n = 10) %>%
select(Country, X1960, X2014, tem_change)
View(top_ten_emission)
options(stringsAsFactors = FALSE)
carbon <- read.csv("data/Carbon_Emission_Data.csv")
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(tem_change)) %>%
head(n = 10) %>%
select(Country, X1960, X2014, tem_change)
as.numeric(levels(top_ten_emission[,2])[levels(top_ten_emission[,2])])
is.numeric(levels(top_ten_emission[,2])[levels(top_ten_emission[,2])])
library(dplyr)
library(plotly)
library(knitr)
options(stringsAsFactors = FALSE)
carbon <- read.csv("data/Carbon_Emission_Data.csv")
tem_change <- read.csv("data/tem_change.csv")
top_ten_emission <- tem_change %>%
arrange(desc(tem_change)) %>%
head(n = 10) %>%
select(Country, X1960, X2014, tem_change)
top_ten_emission <- arrange(top_ten_emission, desc(tem_change))
average_tem_change <- mean(tem_change$tem_change) %>%
round(digits=2)
num_above_avg <- tem_change %>%
filter(tem_change < average_tem_change) %>%
ncol()
colnames(top_ten_emission) <- c('Top 10 Carbon Emission Countries', 'Carbon Emission in 1960', 'Carbon Emission in 2014', 'Temperature Change since 1960')
View(top_ten_emission)
top_ten_emission <- tem_change %>%
arrange(desc(tem_change)) %>%
head(n = 10) %>%
select(Country, tem_change, X1960, X2014)
top_ten_emission <- arrange(top_ten_emission, desc(tem_change))
average_tem_change <- mean(tem_change$tem_change) %>%
round(digits=2)
num_above_avg <- tem_change %>%
filter(tem_change < average_tem_change) %>%
ncol()
colnames(top_ten_emission) <- c('Top 10 Carbon Emission Countries',  'Temperature Change since 1960',
'Carbon Emission in 1960', 'Carbon Emission in 2014')
View(top_ten_emission)
